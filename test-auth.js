// Script de test rapide pour l'authentification
// Ex√©cutez avec : node test-auth.js

const API_BASE = 'http://localhost:3001';

async function testAuth() {
  console.log('üß™ Test du syst√®me d\'authentification\n');

  // G√©n√©rer un email unique
  const testEmail = `test${Date.now()}@example.com`;
  const testPassword = 'Test123456';
  const testName = 'Test User';

  console.log('üìß Email de test:', testEmail);
  console.log('üîë Mot de passe:', testPassword);
  console.log('');

  try {
    // Test 1: Inscription
    console.log('1Ô∏è‚É£  Test d\'inscription...');
    const registerResponse = await fetch(`${API_BASE}/api/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        password: testPassword,
        name: testName
      })
    });

    if (registerResponse.ok) {
      const registerData = await registerResponse.json();
      console.log('‚úÖ Inscription r√©ussie!');
      console.log('   - ID utilisateur:', registerData.user.id);
      console.log('   - Nom:', registerData.user.name);
      console.log('   - Email:', registerData.user.email);
    } else {
      const error = await registerResponse.json();
      console.log('‚ùå Erreur inscription:', error.error);
      return;
    }

    // R√©cup√©rer le cookie de session
    const cookies = registerResponse.headers.get('set-cookie');
    console.log('   - Cookie de session cr√©√©:', cookies ? '‚úÖ' : '‚ùå');
    console.log('');

    // Test 2: V√©rification de la session
    console.log('2Ô∏è‚É£  Test de v√©rification de session...');
    const meResponse = await fetch(`${API_BASE}/api/auth/me`, {
      headers: {
        'Cookie': cookies || ''
      }
    });

    if (meResponse.ok) {
      const meData = await meResponse.json();
      console.log('‚úÖ Session valide!');
      console.log('   - Utilisateur:', meData.user.name);
      console.log('   - Plan:', meData.subscription.plan);
      console.log('   - Limite ebooks:', meData.subscription.monthly_ebooks);
    } else {
      console.log('‚ùå Erreur de session');
    }
    console.log('');

    // Test 3: D√©connexion
    console.log('3Ô∏è‚É£  Test de d√©connexion...');
    const logoutResponse = await fetch(`${API_BASE}/api/auth/logout`, {
      method: 'POST',
      headers: {
        'Cookie': cookies || ''
      }
    });

    if (logoutResponse.ok) {
      console.log('‚úÖ D√©connexion r√©ussie!');
    } else {
      console.log('‚ùå Erreur de d√©connexion');
    }
    console.log('');

    // Test 4: Reconnexion
    console.log('4Ô∏è‚É£  Test de reconnexion...');
    const loginResponse = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        password: testPassword
      })
    });

    if (loginResponse.ok) {
      const loginData = await loginResponse.json();
      console.log('‚úÖ Connexion r√©ussie!');
      console.log('   - Utilisateur:', loginData.user.name);
    } else {
      const error = await loginResponse.json();
      console.log('‚ùå Erreur connexion:', error.error);
    }
    console.log('');

    console.log('üéâ Tous les tests sont termin√©s!\n');
    console.log('üìù Note: V√©rifiez que le serveur Next.js est d√©marr√© (npm run dev)');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.log('\n‚ö†Ô∏è  Assurez-vous que le serveur est d√©marr√© avec "npm run dev"');
  }
}

// V√©rifier que fetch est disponible (Node.js 18+)
if (typeof fetch === 'undefined') {
  console.log('‚ùå Ce script n√©cessite Node.js 18 ou sup√©rieur');
  console.log('   Votre version:', process.version);
  process.exit(1);
}

testAuth();
