import { GoogleGenerativeAI } from '@google/generative-ai'

interface FormData {
  idea: string
  author: string
  genre: string
  targetAudience: string
  length: string
}

interface GeneratedContent {
  title: string
  author: string
  content: string
  coverDescription: string
}

// Initialiser Google Gemini avec la cl√© API
const apiKey = process.env.GOOGLE_AI_API_KEY || 'AIzaSyADxgpjRiMRWwdWrXnoORIt_ibPX7N1FQs'
const genAI = new GoogleGenerativeAI(apiKey)

export async function generateEbook(formData: FormData): Promise<GeneratedContent> {
  try {
    // Calcul pr√©cis du nombre de mots bas√© sur des pages r√©elles
    // Environ 250 mots par page est le standard des livres publi√©s
    const wordsPerPage = 250
    
    const getExactLength = (length: string) => {
      const lengthConfig = {
        court: { pages: 20, minPages: 18, maxPages: 22 },     // 20 pages exactement
        moyen: { pages: 40, minPages: 38, maxPages: 42 },     // 40 pages exactement  
        long: { pages: 80, minPages: 78, maxPages: 82 },      // 80 pages exactement
      }
      
      const config = lengthConfig[length as keyof typeof lengthConfig] || lengthConfig.court
      const exactWords = config.pages * wordsPerPage
      const minWords = config.minPages * wordsPerPage
      const maxWords = config.maxPages * wordsPerPage
      
      return {
        pages: config.pages,
        exactWords,
        minWords,
        maxWords,
        chaptersCount: Math.ceil(config.pages / 5), // Environ 5 pages par chapitre
        wordsPerChapter: Math.ceil(exactWords / Math.ceil(config.pages / 5))
      }
    }

    const lengthConfig = getExactLength(formData.length)
    
    const targetLength = `EXACTEMENT ${lengthConfig.pages} PAGES (${lengthConfig.exactWords} mots pr√©cis√©ment)
- Minimum absolu : ${lengthConfig.minWords} mots
- Maximum autoris√© : ${lengthConfig.maxWords} mots  
- Nombre de chapitres requis : ${lengthConfig.chaptersCount}
- Mots par chapitre : environ ${lengthConfig.wordsPerChapter} mots chacun

IMPORTANT CRITIQUE : Vous DEVEZ atteindre exactement ${lengthConfig.exactWords} mots (¬±500 mots maximum). 
C'est une exigence STRICTE et NON-N√âGOCIABLE.`

    // Instructions sp√©cifiques selon le genre
    const getGenreSpecificInstructions = (genre: string, idea: string): string => {
      if (genre === 'historique') {
        return `
INSTRUCTIONS SP√âCIFIQUES POUR LE GENRE HISTORIQUE :
- Tu es maintenant un HISTORIEN EXPERT qui doit pr√©senter des FAITS HISTORIQUES R√âELS
- Base-toi UNIQUEMENT sur des √©v√©nements, personnages et dates historiques AUTHENTIQUES
- Cite des DATES PR√âCISES, des LIEUX R√âELS, des PERSONNAGES HISTORIQUES AV√âR√âS
- Inclus des SOURCES et des R√âF√âRENCES historiques quand c'est pertinent
- Respecte la CHRONOLOGIE HISTORIQUE exacte
- Mentionne les CAUSES et CONS√âQUENCES r√©elles des √©v√©nements
- √âvite toute FICTION ou INVENTION - tout doit √™tre historiquement v√©rifi√©
- Structure chronologique avec des p√©riodes historiques clairement d√©finies
- Inclus des DATES importantes dans les titres de chapitres
- Ajoute des CONTEXTES g√©opolitiques, sociaux et culturels de l'√©poque
- Mentionne les SOURCES PRIMAIRES et SECONDAIRES quand possible

D√âVELOPPEMENT APPROFONDI REQUIS POUR ATTEINDRE ${lengthConfig.exactWords} MOTS :
- Chaque chapitre doit faire EXACTEMENT environ ${lengthConfig.wordsPerChapter} mots
- D√©veloppe en profondeur les contextes sociaux, √©conomiques et culturels
- Inclus de nombreux exemples concrets et t√©moignages d'√©poque
- Explique les nuances et complexit√©s de chaque p√©riode
- Ajoute des anecdotes historiques v√©rifi√©es pour enrichir le r√©cit
- D√©taille les cons√©quences √† court, moyen et long terme
- Analyse les diff√©rents points de vue historiques sur les √©v√©nements

STRUCTURE OBLIGATOIRE :
${Array.from({length: lengthConfig.chaptersCount}, (_, i) => 
  `# Chapitre ${i + 1} : [Titre avec dates] (${lengthConfig.wordsPerChapter} mots requis)`
).join('\n')}

IMPORTANT : Si c'est l'histoire d'un pays, d'une personne ou d'un √©v√©nement sp√©cifique, respecte scrupuleusement les faits historiques √©tablis.`
      }
      
      return `
INSTRUCTIONS SP√âCIFIQUES POUR LE GENRE ${genre.toUpperCase()} :
- Cr√©e un contenu original, cr√©atif et extr√™mement d√©velopp√©
- D√©veloppe une vraie histoire avec un d√©but, un milieu et une fin tr√®s d√©taill√©s
- Assure-toi que l'histoire soit coh√©rente et captivante du d√©but √† la fin
- Inclus des descriptions d√©taill√©es et immersives pour chaque sc√®ne
- Cr√©e des personnages avec des noms, des personnalit√©s et des motivations complexes et bien d√©velopp√©es
- Utilise de nombreux dialogues naturels et expressifs pour rendre l'histoire vivante
- D√©veloppe en profondeur les √©motions des personnages et leurs relations
- Ajoute des sous-intrigues et des rebondissements pour enrichir l'histoire
- Inclus des descriptions d'environnements riches et d√©taill√©es
- D√©veloppe l'univers et le contexte de l'histoire avec de nombreux d√©tails

D√âVELOPPEMENT REQUIS POUR ATTEINDRE ${lengthConfig.exactWords} MOTS :
- Chaque chapitre doit faire EXACTEMENT environ ${lengthConfig.wordsPerChapter} mots
- D√©veloppe chaque sc√®ne avec un maximum de d√©tails descriptifs
- Ajoute des flashbacks et des backstories pour enrichir les personnages
- Inclus des dialogues √©tendus et des monologues int√©rieurs
- D√©taille chaque action, √©motion et pens√©e des personnages
- D√©veloppe l'environnement et l'atmosph√®re de chaque sc√®ne

STRUCTURE OBLIGATOIRE :
${Array.from({length: lengthConfig.chaptersCount}, (_, i) => 
  `# Chapitre ${i + 1} : [Titre captivant] (${lengthConfig.wordsPerChapter} mots requis)`
).join('\n')}`
    }

    const genreInstructions = getGenreSpecificInstructions(formData.genre, formData.idea)

    const prompt = `Tu es un √©crivain professionnel fran√ßais expert en cr√©ation d'ebooks. Cr√©e un ebook complet et captivant bas√© sur cette id√©e :

ID√âE PRINCIPALE : "${formData.idea}"
${formData.genre ? `GENRE : ${formData.genre}` : ""}
${formData.targetAudience ? `PUBLIC CIBLE : ${formData.targetAudience}` : ""}
LONGUEUR EXACTE REQUISE : ${targetLength}
AUTEUR : ${formData.author || "Auteur IA"}

${genreInstructions}

‚ö†Ô∏è EXIGENCES DE LONGUEUR STRICTES ET NON-N√âGOCIABLES ‚ö†Ô∏è :
- Tu DOIS g√©n√©rer EXACTEMENT ${lengthConfig.exactWords} mots (¬±500 mots maximum)
- Chaque chapitre DOIT faire environ ${lengthConfig.wordsPerChapter} mots
- Tu DOIS cr√©er exactement ${lengthConfig.chaptersCount} chapitres
- Si tu n'atteins pas le nombre de mots requis, CONTINUE √† d√©velopper jusqu'√† l'atteindre
- N'arr√™te JAMAIS l'√©criture tant que tu n'as pas atteint le nombre de mots cible
- Compte tes mots r√©guli√®rement pour t'assurer de respecter l'objectif

TECHNIQUES POUR ATTEINDRE LA LONGUEUR EXACTE :
- D√©veloppe CHAQUE sc√®ne avec un maximum de d√©tails
- Ajoute des descriptions exhaustives des lieux, personnages, √©motions
- Inclus de nombreux dialogues √©tendus
- D√©veloppe les pens√©es int√©rieures des personnages
- Ajoute des transitions d√©taill√©es entre chaque sc√®ne
- Explique les motivations profondes de chaque action
- D√©cris les sensations physiques et √©motionnelles en d√©tail

G√©n√®re un ebook complet et professionnel avec :

1. UN TITRE ACCROCHEUR (maximum 60 caract√®res)
2. LE CONTENU COMPLET DE L'EBOOK AVEC EXACTEMENT ${lengthConfig.exactWords} MOTS :
   - Une introduction tr√®s engageante et immersive (au moins 500 mots)
   - Exactement ${lengthConfig.chaptersCount} chapitres de ${lengthConfig.wordsPerChapter} mots chacun
   ${formData.genre === 'historique' ? '- Des faits historiques pr√©cis avec dates et contextes tr√®s d√©taill√©s' : '- Des dialogues naturels et des descriptions vivantes tr√®s d√©velopp√©es'}
   ${formData.genre === 'historique' ? '- Des r√©f√©rences et sources historiques avec explications compl√®tes' : '- Des personnages attachants et tr√®s bien d√©velopp√©s avec des backstories'}
   - Des transitions fluides et d√©taill√©es entre les chapitres
   ${formData.genre === 'historique' ? '- Une chronologie historique respect√©e avec de nombreux d√©tails contextuels' : '- Une intrigue captivante avec de nombreux rebondissements et sous-intrigues'}
   - Une conclusion tr√®s satisfaisante et √©motionnelle (au moins 500 mots)
   - Un style d'√©criture riche et adapt√© au public cible
3. UNE DESCRIPTION DE COUVERTURE (pour g√©n√©ration d'image)

üéØ RAPPEL CRITIQUE : Cet ebook doit faire EXACTEMENT ${lengthConfig.pages} PAGES (${lengthConfig.exactWords} mots). 
Ne te contente JAMAIS de moins ! Continue √† d√©velopper jusqu'√† atteindre cette longueur exacte !

Format de r√©ponse EXACT (respecte absolument ce format) :
TITRE: [titre ici]
AUTEUR: ${formData.author || "Auteur IA"}
DESCRIPTION_COUVERTURE: [description d√©taill√©e pour image de couverture]
CONTENU:
[contenu complet de l'ebook ici avec exactement ${lengthConfig.exactWords} mots - TR√àS LONG ET D√âTAILL√â]

CONTR√îLE FINAL OBLIGATOIRE : V√©rifie que ton contenu fait bien ${lengthConfig.exactWords} mots (¬±500). Si ce n'est pas le cas, continue √† √©crire !`

    // Utiliser le mod√®le Gemini
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })

    // G√©n√©rer le contenu avec Gemini avec plus de tokens pour du contenu plus long
    const result = await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: prompt }] }],
      generationConfig: {
        temperature: formData.genre === 'historique' ? 0.3 : 0.9, // Moins de cr√©ativit√© pour l'histoire factuelle
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 32768, // Augment√© significativement pour du contenu plus long
      },
    })

    const response = result.response
    const generatedText = response.text()

    // Parser la r√©ponse selon le format attendu
    const parsed = parseGeneratedContent(generatedText, formData.author)
    
    return parsed

  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration avec Gemini:", error)

    // Contenu de fallback en cas d'erreur
    return {
      title: generateFallbackTitle(formData.idea),
      author: formData.author || "Auteur IA",
      content: generateFallbackContent(formData),
      coverDescription: generateFallbackCoverDescription(formData),
    }
  }
}

// Fonction pour parser le contenu g√©n√©r√© par Gemini
function parseGeneratedContent(text: string, authorName: string): GeneratedContent {
  try {
    // Extraire le titre
    const titleMatch = text.match(/TITRE:\s*(.+)/i)
    const title = titleMatch ? titleMatch[1].trim() : "Mon Ebook G√©n√©r√©"

    // Extraire l'auteur
    const authorMatch = text.match(/AUTEUR:\s*(.+)/i)
    const author = authorMatch ? authorMatch[1].trim() : (authorName || "Auteur IA")

    // Extraire la description de couverture
    const coverMatch = text.match(/DESCRIPTION_COUVERTURE:\s*(.+)/i)
    const coverDescription = coverMatch ? coverMatch[1].trim() : "Couverture √©l√©gante et moderne"

    // Extraire le contenu
    const contentMatch = text.match(/CONTENU:\s*([\s\S]+)/i)
    let content = contentMatch ? contentMatch[1].trim() : text

    // Nettoyer le contenu
    content = content
      .replace(/TITRE:.*?\n/gi, '')
      .replace(/AUTEUR:.*?\n/gi, '')
      .replace(/DESCRIPTION_COUVERTURE:.*?\n/gi, '')
      .replace(/CONTENU:\s*/gi, '')
      .trim()

    // S'assurer que le contenu a une structure minimale
    if (!content.includes('# Chapitre') && !content.includes('#Chapitre')) {
      content = `# Chapitre 1 : Le Commencement

${content}

# Chapitre 2 : La Suite de l'Aventure

L'histoire continue avec de nouveaux d√©veloppements passionnants...

# Conclusion

Et c'est ainsi que se termine cette aventure extraordinaire.`
    }

    return {
      title: title.substring(0, 100), // Limiter la longueur du titre
      author,
      content,
      coverDescription,
    }
  } catch (error) {
    console.error("Erreur lors du parsing:", error)
    
    // Retourner le texte brut si le parsing √©choue
    return {
      title: "Mon Ebook G√©n√©r√©",
      author: authorName || "Auteur IA",
      content: text || "Contenu g√©n√©r√© par l'IA...",
      coverDescription: "Couverture moderne et √©l√©gante",
    }
  }
}

// Fonctions de fallback en cas d'erreur
function generateFallbackTitle(idea: string): string {
  const keywords = idea.split(' ').slice(0, 3).join(' ')
  return `L'Histoire de ${keywords}`.substring(0, 60)
}

function generateFallbackContent(formData: FormData): string {
  return `# Chapitre 1 : Le Commencement

Bas√© sur votre id√©e : "${formData.idea}"

Cette histoire commence dans un monde o√π tout est possible. Notre protagoniste, guid√© par ${formData.genre ? `l'esprit du ${formData.genre}` : 'sa curiosit√©'}, s'appr√™te √† vivre une aventure extraordinaire.

## L'Aventure Commence

L'intrigue se d√©veloppe autour de votre concept initial, cr√©ant une narration captivante et immersive.

# Chapitre 2 : Le D√©veloppement

L'histoire prend forme et les personnages √©voluent dans cet univers que vous avez imagin√©.

Les √©v√©nements s'encha√Ænent de mani√®re fluide, cr√©ant une progression narrative naturelle et engageante.

# Chapitre 3 : L'Apog√©e

Le point culminant de l'histoire arrive, o√π tous les √©l√©ments se rejoignent pour cr√©er un moment intense et m√©morable.

# Conclusion

Cette aventure touche √† sa fin, laissant le lecteur avec une sensation de satisfaction et d'accomplissement.

L'histoire que vous aviez en t√™te a pris vie gr√¢ce √† la magie de l'√©criture automatis√©e.

---

*Ebook g√©n√©r√© avec Story2book AI*`
}

function generateFallbackCoverDescription(formData: FormData): string {
  return `Couverture √©l√©gante pour un ebook ${formData.genre ? `de ${formData.genre}` : 'original'}, style moderne avec des √©l√©ments visuels captivants, adapt√© au public ${formData.targetAudience || 'g√©n√©ral'}, atmosph√®re immersive et professionnelle.`
}